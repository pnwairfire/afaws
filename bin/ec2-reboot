#!/usr/bin/env python

"""ec2-reboot: Script to reboot ec2 instances

Use the help ('-h') option to see options and an example call.
"""

__author__      = "Joel Dubowy"

import asyncio
import logging
import sys
import time

try:
    from aws.ec2.execute import FailedToSshError
    from aws.ec2.initialization import InstanceInitializerSsh
    from aws.ec2.reboot import Ec2Reboot
    from aws.scripting import exit_with_msg, AwsScriptArgs, get_config
    from aws.config import Config

except ImportError as e:
    print("""Run in docker:

        docker run --rm -ti -v $PWD/:/aws/ -v $HOME/.aws/:/root/.aws/ \\
            -v $HOME/.ssh:/root/.ssh aws {} -h
    """.format(sys.argv[0]))
    sys.exit(1)


class Ec2RebootArgs(AwsScriptArgs):

    REQUIRED_ARGS = [
        {
            'short': '-i',
            'long': '--instance-identifier',
            'dest': 'instance_identifiers',
            'help': "instance name or id; e.g. 'web-4', 'i-abc123', etc.",
            'action': 'append',
            'default': []
        }
    ]

    OPTIONAL_ARGS = [
        {
            'long': '--initialize',
            'help': "initialize after launching",
            "action": "store_true"
        },
        {
            'short': '-k',
            'long': '--ssh-key',
            'help': ("key for ssh'ing to ec2 instances during initialization;"
                " This is different than the AWS key pair name")
        }
    ]

    EXAMPLE_STRING = """Example calls:
     > {script} --log-level INFO -i test-2 \\
        --initialize --ssh-key /root/.ssh/id_rsa \\
        --config-file ./config.json
    """.format(script=sys.argv[0])

    def _check_args(self):
        if self.args.initialize and not self.args.ssh_key:
            exit_with_msg("--initialize requires --ssh-key")


async def main():
    args = Ec2RebootArgs().args
    config = Config(get_config(args))

    try:
        instances = await Ec2Reboot().reboot(args.instance_identifiers)

        if args.initialize:
            logging.info("Waiting 5 seconds before intializing")
            time.sleep(5)
            initializer = InstanceInitializerSsh(args.ssh_key, config)
            await initializer.initialize(instances)

    except FailedToSshError as e:
        exit_with_msg("Failed to SSH during initialization.  "
            "Wait a few minutes and try running ec2-initialize.")

    except Exception as e:
        exit_with_msg(e)


if __name__ == "__main__":
    asyncio.run(main())
